/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/game.js */ \"./src/js/modules/game.js\");\n/* harmony import */ var _modules_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/view.js */ \"./src/js/modules/view.js\");\n/* harmony import */ var _modules_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/controller.js */ \"./src/js/modules/controller.js\");\n/* harmony import */ var _modules_sound_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/sound.js */ \"./src/js/modules/sound.js\");\n\r\n\r\n\r\n\r\n\r\nconst root = document.getElementById('root');\r\nconst options = {\r\n  width: 240,\r\n  height: 320,\r\n  rows: 20,\r\n  colums: 10,\r\n};\r\n\r\nconst sound = new _modules_sound_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](root);\r\nconst game = new _modules_game_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sound);\r\nconst view = new _modules_view_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](root, options);\r\nconst controller = new _modules_controller_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](game, view, sound);\n\n//# sourceURL=webpack://good_old_tetris/./src/js/index.js?");

/***/ }),

/***/ "./src/js/modules/controller.js":
/*!**************************************!*\
  !*** ./src/js/modules/controller.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Controller)\n/* harmony export */ });\nclass Controller {\r\n    constructor(game, view, sound) {\r\n      this.game = game;\r\n      this.view = view;\r\n      this.sound = sound;\r\n      this.intervalId = null;\r\n      this.isPlaying = false;\r\n      document.addEventListener('keydown', this.handleKeyDown.bind(this));\r\n      document.addEventListener('keyup', this.handleKeyUp.bind(this));\r\n      this.buttons = document.getElementsByTagName('button');\r\n      document.addEventListener('click', this.handleClick.bind(this));\r\n      this.view.renderStartGameScreen();\r\n    }\r\n    update() {\r\n      this.game.moveDown();\r\n      this.updateView();\r\n    }\r\n    updateView() {\r\n      const state = this.game.gameState();\r\n      if (state.isGameOver) {\r\n        this.view.renderGameOverScreen(state);\r\n      } else if (!this.isPlaying) {\r\n        this.view.renderPauseGameScreen();\r\n      } else {\r\n        this.view.renderMainScreen(state);\r\n      }\r\n    }\r\n    play() {\r\n      this.isPlaying = true;\r\n      this.startTimer();\r\n      this.updateView();\r\n    }\r\n    pause() {\r\n      this.isPlaying = false;\r\n      this.game.playSoundIndepended('pause');\r\n      this.stopTimer();\r\n      this.updateView();\r\n    }\r\n    reset() {\r\n      this.game.reset();\r\n      this.game.playMusic(this.game.gameState().isMusicOn);\r\n      this.play();\r\n    }\r\n    startTimer() {\r\n      const speed = 1000 - this.game.gameState().gameLevel * 100;\r\n      if (!this.intervalId) {\r\n        this.intervalId = setInterval(() => {\r\n          this.update();\r\n        }, speed > 0 ? speed : 100);\r\n      }\r\n    }\r\n    stopTimer() {\r\n      if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n      }\r\n    }\r\n    handleKeyDown({ keyCode }) {\r\n      const isGameOver = this.game.gameState();\r\n      switch (keyCode) {\r\n        case 37:\r\n          if (this.isPlaying) {\r\n            this.game.moveLeft();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 38:\r\n          if (this.isPlaying) {\r\n            this.game.rotate();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 39:\r\n          if (this.isPlaying) {\r\n            this.game.moveRight();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 40:\r\n          if (this.isPlaying) {\r\n            this.stopTimer();\r\n            this.game.moveDown();\r\n            this.updateView();\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    handleKeyUp({ keyCode }) {\r\n      switch (keyCode) {\r\n        case 40:\r\n          if (this.isPlaying) {\r\n            this.startTimer();\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    handleClick({ target }) {\r\n      const { isSoundOn,isMusicOn,isGameOver } = this.game.gameState();\r\n      const keyId = target.getAttribute('id');\r\n      switch (keyId) {\r\n        case 'keyStart':\r\n          if (isGameOver) {\r\n            this.game.playMusic(isMusicOn);\r\n            this.reset();\r\n          } else if (this.isPlaying) {\r\n            this.game.pauseMusic(isMusicOn);\r\n            this.pause();\r\n          } else {\r\n            this.game.playMusic(isMusicOn);\r\n            this.play();\r\n          }\r\n          break;\r\n        case 'keyMusic':\r\n          if (this.isPlaying && isMusicOn) {\r\n            localStorage.setItem('isMusicOn', false);\r\n            this.game.pauseMusic();\r\n          } else if (this.isPlaying) {\r\n            localStorage.setItem('isMusicOn', true);\r\n            this.game.playMusic();\r\n          }\r\n          break;\r\n        case 'keySound':\r\n          if (this.isPlaying && isSoundOn) {\r\n            localStorage.setItem('isSoundOn', false);\r\n          } else if (this.isPlaying) {\r\n            localStorage.setItem('isSoundOn', true);\r\n          }\r\n          break;\r\n        case 'keyLeft':\r\n          if (this.isPlaying) {\r\n            this.game.moveLeft();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 'keyUp':\r\n          if (this.isPlaying) {\r\n            this.game.rotate();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 'keyRotate':\r\n          if (this.isPlaying) {\r\n            this.game.rotate();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 'keyRight':\r\n          if (this.isPlaying) {\r\n            this.game.moveRight();\r\n            this.updateView();\r\n          }\r\n          break;\r\n        case 'keyDown':\r\n          if (this.isPlaying) {\r\n            this.game.moveDown();\r\n            this.updateView();\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\n\n//# sourceURL=webpack://good_old_tetris/./src/js/modules/controller.js?");

/***/ }),

/***/ "./src/js/modules/game.js":
/*!********************************!*\
  !*** ./src/js/modules/game.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\nclass Game {\r\n    constructor(sound) {\r\n      this.sound = sound;\r\n      this.gamePoints = {\r\n        '1': 100,\r\n        '2': 300,\r\n        '3': 700,\r\n        '4': 1500,\r\n      };\r\n      this.reset();\r\n    }\r\n    get gameLevel() {\r\n      return Math.floor(this.lines * 0.1);\r\n    }\r\n    gameState() {\r\n      const playField = this.createPlayField();\r\n      const { x: pieceX, y: pieceY, blocks } = this.activeTetramino;\r\n      for (let y = 0; y < this.playField.length; y += 1) {\r\n        playField[y] = [];\r\n        for (let x = 0; x < this.playField[y].length; x += 1) {\r\n          playField[y][x] = this.playField[y][x];\r\n        }\r\n      }\r\n      for (let y = 0; y < blocks.length; y += 1) {\r\n        for (let x = 0; x < blocks[y].length; x += 1) {\r\n          if (blocks[y][x]) {\r\n            playField[pieceY + y][pieceX + x] = blocks[y][x];\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        gameLevel: this.gameLevel,\r\n        lines: this.lines,\r\n        score: this.score,\r\n        hiscore: this.hiscore,\r\n        nextTetramino: this.nextTetramino,\r\n        playField,\r\n        isGameOver: this.topOut,\r\n        isSoundOn: this.sound.getSoundState().isSoundOn,\r\n        isMusicOn: this.sound.getSoundState().isMusicOn,\r\n      };\r\n    }\r\n    reset() {\r\n      this.score = 0;\r\n      this.hiscore = localStorage.getItem('hiscore') || 0;\r\n      this.lines = 0;\r\n      this.topOut = false;\r\n      this.playField = this.createPlayField();\r\n      this.activeTetramino = this.createTetramino();\r\n      this.nextTetramino = this.createTetramino();\r\n    }\r\n    createPlayField(emptyBlock = 0) {\r\n      const playField = [];\r\n      for (let y = 0; y < 20; y += 1) {\r\n        playField[y] = [];\r\n        for (let x = 0; x < 10; x += 1) {\r\n          playField[y][x] = emptyBlock;\r\n        }\r\n      }\r\n      return playField;\r\n    }\r\n    createTetramino() {\r\n      const index = Math.floor(Math.random() * 7);\r\n      const types = 'IJLOSTZ';\r\n      const type = types[index];\r\n      const piece = {};\r\n      switch (type) {\r\n        case 'I':\r\n          piece.blocks = [\r\n            [0, 0, 0, 0],\r\n            [1, 1, 1, 1],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0]\r\n          ];\r\n          break;\r\n        case 'J':\r\n          piece.blocks = [\r\n            [0, 0, 0],\r\n            [2, 2, 2],\r\n            [0, 0, 2],\r\n          ];\r\n          break;\r\n        case 'L':\r\n          piece.blocks = [\r\n            [0, 0, 0],\r\n            [3, 3, 3],\r\n            [3, 0, 0],\r\n          ];\r\n          break;\r\n        case 'O':\r\n          piece.blocks = [\r\n            [0, 0, 0, 0],\r\n            [0, 4, 4, 0],\r\n            [0, 4, 4, 0],\r\n            [0, 0, 0, 0]\r\n          ];\r\n          break;\r\n        case 'S':\r\n          piece.blocks = [\r\n            [0, 0, 0],\r\n            [0, 5, 5],\r\n            [5, 5, 0],\r\n          ];\r\n          break;\r\n        case 'T':\r\n          piece.blocks = [\r\n            [0, 0, 0],\r\n            [6, 6, 6],\r\n            [0, 6, 0],\r\n          ];\r\n          break;\r\n        case 'Z':\r\n          piece.blocks = [\r\n            [0, 0, 0],\r\n            [7, 7, 0],\r\n            [0, 7, 7],\r\n          ];\r\n          break;\r\n      }\r\n      piece.x = Math.floor((10 - piece.blocks[0].length) / 2);\r\n      piece.y = -1;\r\n      return piece;\r\n    }\r\n    moveLeft() {\r\n      this.activeTetramino.x -= 1;\r\n      if (this.collisionDetection()) {\r\n        this.activeTetramino.x += 1;\r\n      } else {\r\n        this.playSound('whoosh');\r\n      }\r\n    }\r\n    moveRight() {\r\n      this.activeTetramino.x += 1;\r\n      if (this.collisionDetection()) {\r\n        this.activeTetramino.x -= 1;\r\n      } else {\r\n        this.playSound('whoosh');\r\n      }\r\n    }\r\n    moveDown() {\r\n      if (this.topOut) {\r\n        return;\r\n      }\r\n      this.activeTetramino.y += 1;\r\n      if (this.collisionDetection()) {\r\n        this.activeTetramino.y -= 1;\r\n        this.fixTetramino();\r\n        const numOfClearedLines = this.clearLines();\r\n        this.updateScore(numOfClearedLines);\r\n        this.updateTetramino();\r\n      }\r\n      if (this.collisionDetection()) {\r\n        this.topOut = true;\r\n        this.pauseMusic();\r\n        this.playSoundEndGame(this.gameState());\r\n      }\r\n    }\r\n    rotate() {\r\n      this.rotateTetramino();\r\n      if (this.collisionDetection()) {\r\n        this.rotateTetramino(false);\r\n      }\r\n    }\r\n    rotateTetramino() {\r\n      const blocks = this.activeTetramino.blocks;\r\n        const length = blocks.length;\r\n        const temp = [];\r\n        for(let i = 0; i < length; i++) {\r\n            temp[i] = new Array(length).fill(0);\r\n        }\r\n        for(let y = 0; y < length; y++) {\r\n            for(let x = 0; x < length; x++) {\r\n                temp[x][y] = blocks[length - 1 - y][x];\r\n                this.playSound('blockRotate');\r\n            }\r\n        }\r\n        this.activeTetramino.blocks = temp;\r\n        if(this.collisionDetection()) {\r\n            this.activeTetramino.blocks = blocks;\r\n        }\r\n    }\r\n    collisionDetection() {\r\n      const { x: pieceX, y: pieceY, blocks } = this.activeTetramino;\r\n      for (let y = 0; y < blocks.length; y += 1) {\r\n        for (let x = 0; x < blocks[y].length; x += 1) {\r\n          if (\r\n            blocks[y][x] &&\r\n            ((this.playField[pieceY + y] === undefined ||\r\n                this.playField[pieceY + y][pieceX + x] === undefined) ||\r\n              this.playField[pieceY + y][pieceX + x])\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    fixTetramino() {\r\n      const { x: pieceX, y: pieceY, blocks } = this.activeTetramino;\r\n      for (let y = 0; y < blocks.length; y += 1) {\r\n        for (let x = 0; x < blocks[y].length; x += 1) {\r\n          if (blocks[y][x]) {\r\n            this.playField[pieceY + y][pieceX + x] = blocks[y][x];\r\n          }\r\n        }\r\n      }\r\n      this.playSoundIndepended('fall');\r\n    }\r\n    clearLines() {\r\n      const rows = 20;\r\n      const colums = 10;\r\n      let lines = [];\r\n      for (let y = rows - 1; y >= 0; y -= 1) {\r\n        let numberOfBlocks = 0;\r\n        for (let x = 0; x < colums; x += 1) {\r\n          if (this.playField[y][x]) {\r\n            numberOfBlocks += 1;\r\n          }\r\n        }\r\n        if (numberOfBlocks === 0) {\r\n          break;\r\n        } else if (numberOfBlocks < colums) {\r\n          continue;\r\n        } else if (numberOfBlocks === colums) {\r\n          lines.unshift(y);\r\n          this.playSoundIndepended('clear');\r\n        }\r\n      }\r\n      for (let line of lines) {\r\n        this.playField.splice(line, 1);\r\n        this.playField.unshift(new Array(colums).fill(0));\r\n      }\r\n      return lines.length;\r\n    }\r\n    updateScore(clearedLines) {\r\n      if (clearedLines > 0) {\r\n        this.score += this.gamePoints[clearedLines] * (this.gameLevel + 1);\r\n        this.lines += clearedLines;\r\n      }\r\n      if (this.score > this.hiscore) {\r\n        localStorage.setItem('hiscore', this.score);\r\n        this.hiscore = localStorage.getItem('hiscore');\r\n      }\r\n    }\r\n    updateTetramino() {\r\n      this.activeTetramino = this.nextTetramino;\r\n      this.nextTetramino = this.createTetramino();\r\n    }\r\n    playMusic(music = true) {\r\n      if (music) {\r\n        this.sound.getSound().tetrisMain.play();\r\n      }\r\n    }\r\n    pauseMusic(music = true) {\r\n      if (music) {\r\n        this.sound.getSound().tetrisMain.pause();\r\n      }\r\n    }\r\n    playSound(sound) {\r\n      if (this.sound.getSoundState().isSoundOn && !this.collisionDetection()) {\r\n        this.sound.getSound()[sound].play();\r\n      }\r\n    }\r\n    playSoundIndepended(sound) {\r\n      if (this.sound.getSoundState().isSoundOn) {\r\n        this.sound.getSound()[sound].play();\r\n      }\r\n    }\r\n    playSoundEndGame({ score, hiscore }) {\r\n      const { success, gameover } = this.sound.getSound();\r\n      if (this.sound.getSoundState().isSoundOn && score == hiscore) {\r\n        success.play();\r\n      } else if (this.sound.getSoundState().isSoundOn && score != hiscore) {\r\n        gameover.play();\r\n      }\r\n    }\r\n  }\n\n//# sourceURL=webpack://good_old_tetris/./src/js/modules/game.js?");

/***/ }),

/***/ "./src/js/modules/sound.js":
/*!*********************************!*\
  !*** ./src/js/modules/sound.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Sound)\n/* harmony export */ });\nclass Sound {\r\n    constructor(parentNode) {\r\n      this.sounds = {\r\n        'main': 'tetrisMain',\r\n        'pause': 'pause',\r\n        'rotate': 'blockRotate',\r\n        'whoosh': 'whoosh',\r\n        'fall': 'fall',\r\n        'clear': 'clear',\r\n        'gameover': 'gameover',\r\n        'success': 'success'\r\n      };\r\n      this.parentNode = parentNode;\r\n      const soundCol = Object.keys(this.sounds);\r\n      soundCol.forEach(function (sound) {\r\n        this.handleAudio(this.parentNode, this.sounds[sound]);\r\n      }, this);\r\n    }\r\n    getSoundState() {\r\n      const soundState = {};\r\n      soundState.isSoundOn = Boolean(JSON.parse(localStorage.getItem('isSoundOn')));\r\n      soundState.isMusicOn = Boolean(JSON.parse(localStorage.getItem('isMusicOn')));\r\n      return soundState;\r\n    }\r\n    getSound() {\r\n      const soundtrack = {};\r\n      const sounds = document.querySelectorAll('audio');\r\n      sounds.forEach((sound) => {\r\n        const name = sound.getAttribute('id').substring(6);\r\n        soundtrack[name] = sound;\r\n      });\r\n      return soundtrack;\r\n    }\r\n    handleAudio(parent, sound) {\r\n      const audio = document.createElement('audio');\r\n      audio.setAttribute('id', `audio-${ sound }`);\r\n      if (sound.includes('Main')) {\r\n        audio.setAttribute('loop', 'loop');\r\n      }\r\n      audio.setAttribute('preload', 'auto');\r\n      const soundSrc = document.createElement('source');\r\n      soundSrc.setAttribute('src', `./sounds/${ sound }.mp3`);\r\n      audio.appendChild(soundSrc);\r\n      parent.appendChild(audio);\r\n    }\r\n  }\n\n//# sourceURL=webpack://good_old_tetris/./src/js/modules/sound.js?");

/***/ }),

/***/ "./src/js/modules/view.js":
/*!********************************!*\
  !*** ./src/js/modules/view.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ View)\n/* harmony export */ });\nclass View {\r\n    constructor(element, { width, height, rows, colums }, sound) {\r\n      this.element = element;\r\n      this.sound = sound;\r\n      this.width = width;\r\n      this.height = height;\r\n      this.canvas = document.createElement('canvas');\r\n      this.canvas.width = this.width;\r\n      this.canvas.height = this.height;\r\n      this.ctx = this.canvas.getContext('2d');\r\n      this.playFieldBorderWidth = 2;\r\n      this.playFieldX = this.playFieldBorderWidth;\r\n      this.playFieldY = this.playFieldBorderWidth;\r\n      this.playFieldWidth = this.width * 2 / 3;\r\n      this.playFieldHeight = this.height;\r\n      this.playFieldInnerWidth = this.playFieldWidth - this.playFieldBorderWidth * 2;\r\n      this.playFieldInnerHeight = this.playFieldHeight - this.playFieldBorderWidth * 2;\r\n      this.blockWidth = this.playFieldInnerWidth / colums;\r\n      this.blockHeight = this.playFieldInnerHeight / rows;\r\n      this.panelX = this.playFieldWidth + 5;\r\n      this.panelY = 0;\r\n      this.panelWidth = this.width / 3;\r\n      this.panelHeight = this.height;\r\n      this.blockColor = 'black';\r\n      this.element.appendChild(this.canvas);\r\n    }\r\n    renderMainScreen(state) {\r\n      this.clearScreen();\r\n      this.renderPlayField(state);\r\n      this.renderSidePanel(state);\r\n    }\r\n    renderStartGameScreen() {\r\n      this.ctx.fillStyle = 'black';\r\n      this.ctx.font = '34px Technology';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.textBaseline = 'middle';\r\n      this.ctx.fillText('Press \"Start\"', this.width / 2, this.height / 2 - 18);\r\n      this.ctx.fillText('to Play', this.width / 2, this.height / 2 + 18);\r\n    }\r\n    renderPauseGameScreen() {\r\n      this.ctx.fillStyle = 'black';\r\n      this.ctx.font = '20px Technology';\r\n      this.ctx.fillText(`Pause`, this.panelX, this.panelY + 211);\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.textBaseline = 'middle';\r\n    }\r\n    renderGameOverScreen({ score,hiscore }) {\r\n      this.clearScreen();\r\n      this.ctx.fillStyle = 'black';\r\n      this.ctx.font = '34px Technology';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.textBaseline = 'middle';\r\n      if (score == hiscore && hiscore != 0) {\r\n        this.ctx.fillText('GAME OVER', this.width / 2, this.height / 2 - 36);\r\n        this.ctx.fillText(`New hi-score`, this.width / 2, this.height / 2);\r\n        this.ctx.fillText(`${hiscore}`, this.width / 2, this.height / 2 + 36);\r\n      } else {\r\n        this.ctx.fillText('GAME OVER', this.width / 2, this.height / 2 - 18);\r\n        this.ctx.fillText(`Score:${score}`, this.width / 2, this.height / 2 + 18);\r\n      }\r\n    }\r\n    clearScreen() {\r\n      this.ctx.clearRect(0, 0, this.width, this.height);\r\n    }\r\n    renderPlayField({ playField }) {\r\n      for (let y = 0; y < playField.length; y += 1) {\r\n        const line = playField[y];\r\n        for (let x = 0; x < line.length; x += 1) {\r\n          const block = line[x];\r\n          if (block) {\r\n            this.renderBlock(\r\n              this.playFieldX + (x * this.blockWidth),\r\n              this.playFieldY + (y * this.blockHeight),\r\n              this.blockWidth,\r\n              this.blockHeight,\r\n              this.blockColor\r\n            );\r\n          }\r\n        }\r\n      }\r\n      this.ctx.strokeStyle = 'black';\r\n      this.ctx.lineWidth = this.playFieldBorderWidth;\r\n      this.ctx.strokeRect(0, 0, this.playFieldWidth, this.playFieldHeight);\r\n    }\r\n    renderSidePanel({ gameLevel, score, hiscore, nextTetramino, isSoundOn, isMusicOn }) {\r\n      this.ctx.textAlign = 'start';\r\n      this.ctx.textBaseline = 'top';\r\n      this.ctx.fillStyle = 'black';\r\n      this.ctx.font = '20px Technology';\r\n      this.ctx.fillText(`Score`, this.panelX, this.panelY + 5);\r\n      this.ctx.fillText(`${score}`, this.panelX, this.panelY + 25);\r\n      this.ctx.fillText(`Hi-score`, this.panelX, this.panelY + 45);\r\n      this.ctx.fillText(`${hiscore}`, this.panelX, this.panelY + 65);\r\n      this.ctx.fillText(`Level`, this.panelX, this.panelY + 85);\r\n      this.ctx.fillText(`${gameLevel}`, this.panelX, this.panelY + 105);\r\n      this.ctx.font = '18px Technology';\r\n      if (isMusicOn) {\r\n        this.ctx.fillText(`Music On`, this.panelX, this.panelY + 280);\r\n      } else {\r\n        this.ctx.fillText(`Music Off`, this.panelX, this.panelY + 280);\r\n      }\r\n      if (isSoundOn) {\r\n        this.ctx.fillText(`Sound On`, this.panelX, this.panelY + 300);\r\n      } else {\r\n        this.ctx.fillText(`Sound Off`, this.panelX, this.panelY + 300);\r\n      }\r\n      for (let y = 0; y < nextTetramino.blocks.length; y += 1) {\r\n        for (let x = 0; x < nextTetramino.blocks[y].length; x += 1) {\r\n          const block = nextTetramino.blocks[y][x];\r\n          if (block) {\r\n            this.renderBlock(\r\n              this.panelX + (x * this.blockWidth),\r\n              this.panelY + 110 + (y * this.blockHeight),\r\n              this.blockWidth,\r\n              this.blockHeight,\r\n              this.blockColor\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    renderBlock(x, y, width, height, blockColor) {\r\n      this.ctx.fillStyle = blockColor;\r\n      this.ctx.strokeStyle = 'grey';\r\n      this.ctx.lineWidth = 1;\r\n      this.ctx.fillRect(x, y, width, height);\r\n      this.ctx.strokeRect(x, y, width, height);\r\n    }\r\n  }\n\n//# sourceURL=webpack://good_old_tetris/./src/js/modules/view.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/index.js");
/******/ 	
/******/ })()
;